{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      customer: {\n        name: '',\n        contact: '',\n        address: ''\n      },\n      products: [],\n      // All products from the backend\n      bill: [],\n      // Products added to the bill\n      subtotal: 0,\n      tax: 0,\n      total: 0\n    };\n  },\n  created() {\n    this.fetchProducts();\n  },\n  methods: {\n    // Fetch products from the API\n    async fetchProducts() {\n      try {\n        const response = await axios.get('/api/product');\n        this.products = response.data.data;\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    // Add product to bill\n    addToBill(product) {\n      const existingProduct = this.bill.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.qty += 1;\n      } else {\n        this.bill.push({\n          ...product,\n          qty: 1\n        });\n      }\n      this.updateSummary();\n    },\n    // Update total for a product\n    updateTotal(product) {\n      if (product.qty < 1) product.qty = 1;\n      this.updateSummary();\n    },\n    // Update subtotal, tax, and total\n    updateSummary() {\n      this.subtotal = this.bill.reduce((sum, product) => sum + product.qty * product.price, 0);\n      this.tax = this.subtotal * 0.05;\n      this.total = this.subtotal + this.tax;\n    },\n    // Generate the bill (navigate to invoice page or process it)\n    generateBill() {\n      // You can make an API call here to store the bill, or navigate to an invoice page\n      console.log('Generating bill...', this.bill);\n      this.$router.push('/invoice');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","customer","name","contact","address","products","bill","subtotal","tax","total","created","fetchProducts","methods","response","get","error","console","addToBill","product","existingProduct","find","item","id","qty","push","updateSummary","updateTotal","reduce","sum","price","generateBill","log","$router"],"sources":["H:\\vue\\vue_inventory\\src\\components\\Bill.vue"],"sourcesContent":["<template>\r\n    <div class=\"billing-container\">\r\n      <header class=\"header\">\r\n        <h1>Billing System</h1>\r\n        <p>Inventory Management</p>\r\n      </header>\r\n  \r\n      <!-- Customer Details Section -->\r\n      <section class=\"customer-details\">\r\n        <h2>Customer Information</h2>\r\n        <label for=\"customer-name\">Name:</label>\r\n        <input type=\"text\" v-model=\"customer.name\" placeholder=\"Enter Customer Name\">\r\n  \r\n        <label for=\"customer-contact\">Contact:</label>\r\n        <input type=\"text\" v-model=\"customer.contact\" placeholder=\"Enter Contact Number\">\r\n  \r\n        <label for=\"customer-address\">Address:</label>\r\n        <textarea v-model=\"customer.address\" placeholder=\"Enter Address\"></textarea>\r\n      </section>\r\n  \r\n      <!-- Product List Section -->\r\n      <section class=\"product-list\">\r\n        <h2>Products</h2>\r\n        <table id=\"product-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product Name</th>\r\n              <th>Qty</th>\r\n              <th>Price</th>\r\n              <th>Total</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"product in products\" :key=\"product.id\">\r\n              <td>{{ product.name }}</td>\r\n              <td><input type=\"number\" v-model=\"product.qty\" :min=\"1\" @input=\"updateTotal(product)\"></td>\r\n              <td>{{ product.price }}</td>\r\n              <td>{{ product.qty * product.price }}</td>\r\n              <td>\r\n                <button @click=\"addToBill(product)\">Add to Bill</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n  \r\n      <!-- Billing Summary Section -->\r\n      <section class=\"billing-summary\">\r\n        <h2>Billing Summary</h2>\r\n        <p><strong>Subtotal:</strong> <span id=\"subtotal\">{{ subtotal }}</span></p>\r\n        <p><strong>Tax (5%):</strong> <span id=\"tax\">{{ tax }}</span></p>\r\n        <p><strong>Total Amount:</strong> <span id=\"total\">{{ total }}</span></p>\r\n  \r\n        <button id=\"generate-bill\" @click=\"generateBill\">Generate Bill</button>\r\n      </section>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        customer: {\r\n          name: '',\r\n          contact: '',\r\n          address: ''\r\n        },\r\n        products: [], // All products from the backend\r\n        bill: [], // Products added to the bill\r\n        subtotal: 0,\r\n        tax: 0,\r\n        total: 0\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchProducts();\r\n    },\r\n    methods: {\r\n      // Fetch products from the API\r\n      async fetchProducts() {\r\n        try {\r\n          const response = await axios.get('/api/product');\r\n          this.products = response.data.data;\r\n        } catch (error) {\r\n          console.error('Error fetching products:', error);\r\n        }\r\n      },\r\n      // Add product to bill\r\n      addToBill(product) {\r\n        const existingProduct = this.bill.find(item => item.id === product.id);\r\n        if (existingProduct) {\r\n          existingProduct.qty += 1;\r\n        } else {\r\n          this.bill.push({ ...product, qty: 1 });\r\n        }\r\n        this.updateSummary();\r\n      },\r\n      // Update total for a product\r\n      updateTotal(product) {\r\n        if (product.qty < 1) product.qty = 1;\r\n        this.updateSummary();\r\n      },\r\n      // Update subtotal, tax, and total\r\n      updateSummary() {\r\n        this.subtotal = this.bill.reduce((sum, product) => sum + product.qty * product.price, 0);\r\n        this.tax = this.subtotal * 0.05;\r\n        this.total = this.subtotal + this.tax;\r\n      },\r\n      // Generate the bill (navigate to invoice page or process it)\r\n      generateBill() {\r\n        // You can make an API call here to store the bill, or navigate to an invoice page\r\n        console.log('Generating bill...', this.bill);\r\n        this.$router.push('/invoice');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n\r\n<style scoped>\r\n/* styles.css */\r\nbody {\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f4f4f9;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.billing-container {\r\n    width: 80%;\r\n    margin: 20px auto;\r\n    background-color: #fff;\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.header h1 {\r\n    text-align: center;\r\n    color: #333;\r\n}\r\n\r\n.customer-details,\r\n.product-list,\r\n.billing-summary {\r\n    margin-bottom: 20px;\r\n}\r\n\r\nh2 {\r\n    color: #4CAF50;\r\n}\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n    display: block;\r\n}\r\n\r\ninput, textarea {\r\n    width: 100%;\r\n    padding: 8px;\r\n    margin: 8px 0;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n    height: 80px;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin-top: 20px;\r\n}\r\n\r\ntable, th, td {\r\n    border: 1px solid #ddd;\r\n}\r\n\r\nth, td {\r\n    padding: 10px;\r\n    text-align: center;\r\n}\r\n\r\nbutton {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n    font-size: 16px;\r\n    margin-top: 10px;\r\n}\r\n\r\nbutton:hover {\r\n    background-color: #45a049;\r\n}\r\n\r\nfooter {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    font-size: 14px;\r\n    color: #888;\r\n}\r\n</style>\r\n"],"mappings":";;;;AA4DE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE,EAAE;MAAE;MACdC,IAAI,EAAE,EAAE;MAAE;MACVC,QAAQ,EAAE,CAAC;MACXC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,cAAc,CAAC;QAChD,IAAI,CAACT,QAAO,GAAIQ,QAAQ,CAACb,IAAI,CAACA,IAAI;MACpC,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD;IACAE,SAASA,CAACC,OAAO,EAAE;MACjB,MAAMC,eAAc,GAAI,IAAI,CAACb,IAAI,CAACc,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,KAAMJ,OAAO,CAACI,EAAE,CAAC;MACtE,IAAIH,eAAe,EAAE;QACnBA,eAAe,CAACI,GAAE,IAAK,CAAC;MAC1B,OAAO;QACL,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC;UAAE,GAAGN,OAAO;UAAEK,GAAG,EAAE;QAAE,CAAC,CAAC;MACxC;MACA,IAAI,CAACE,aAAa,CAAC,CAAC;IACtB,CAAC;IACD;IACAC,WAAWA,CAACR,OAAO,EAAE;MACnB,IAAIA,OAAO,CAACK,GAAE,GAAI,CAAC,EAAEL,OAAO,CAACK,GAAE,GAAI,CAAC;MACpC,IAAI,CAACE,aAAa,CAAC,CAAC;IACtB,CAAC;IACD;IACAA,aAAaA,CAAA,EAAG;MACd,IAAI,CAAClB,QAAO,GAAI,IAAI,CAACD,IAAI,CAACqB,MAAM,CAAC,CAACC,GAAG,EAAEV,OAAO,KAAKU,GAAE,GAAIV,OAAO,CAACK,GAAE,GAAIL,OAAO,CAACW,KAAK,EAAE,CAAC,CAAC;MACxF,IAAI,CAACrB,GAAE,GAAI,IAAI,CAACD,QAAO,GAAI,IAAI;MAC/B,IAAI,CAACE,KAAI,GAAI,IAAI,CAACF,QAAO,GAAI,IAAI,CAACC,GAAG;IACvC,CAAC;IACD;IACAsB,YAAYA,CAAA,EAAG;MACb;MACAd,OAAO,CAACe,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACzB,IAAI,CAAC;MAC5C,IAAI,CAAC0B,OAAO,CAACR,IAAI,CAAC,UAAU,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}